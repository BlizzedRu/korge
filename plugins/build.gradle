import org.jetbrains.kotlin.config.KotlinCompilerVersion

buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "com.gradle.publish:plugin-publish-plugin:0.9.6"
	}
}

plugins {
	id 'kotlin-multiplatform' version '1.3.20-eap-100'
	id 'com.moowork.node' version '1.2.0'
}

repositories {
	mavenLocal()
	jcenter()
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url "https://dl.bintray.com/soywiz/soywiz" }
	maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
}

configurations {
	rtArtifacts
}
dependencies {
	rtArtifacts "com.soywiz:korge-jvm:$korgeVersion"
}

def versions = [:]

configurations.rtArtifacts.each { file ->
	def res = file.absolutePath =~ /.*?(\w+)-(jvm|metadata)-(.*)\.jar/
	//println(file)
	if (res.matches()) {
		versions[res.group(1)] = res.group(3)
	}
}


//new File("korge-build/src/main/kotlin/com/soywiz/korge/build/BuildVersions.kt").write("""
new File("korge-gradle-plugin/src/main/kotlin/com/soywiz/korge/gradle/BuildVersions.kt").write("""
package com.soywiz.korge.gradle

object BuildVersions {
	const val KORMA = "${versions.korma}"
	const val KORIO = "${versions.korio}"
	const val KORIM = "${versions.korim}"
	const val KORAU = "${versions.korau}"
	const val KORUI = "${versions.korui ?: versions.korgw}"
	const val KOREV = "${versions.korev}"
	const val KORGW = "${versions.korgw}"
	const val KORGE = "${versions.korge}"
	const val KOTLIN = "${KotlinCompilerVersion.VERSION}"
}
""")

allprojects {
	group 'com.soywiz'
	version projectVersion

	repositories {
		mavenLocal()
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url "https://dl.bintray.com/soywiz/soywiz" }
		maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
	}

	apply plugin: 'maven'
	apply plugin: 'maven-publish'

	def pomBaseData = {
		licenses {
			license {
				name project.property("project.license.name")
				url project.property("project.license.url")
			}
		}
		scm {
			url project.property("project.scm.url")
		}
	}

	def generatePom = { pom ->
		pom.withXml {
			def root = it.asNode()
			root.appendNode('name', project.name)
			root.appendNode('description', project.property("project.description"))
			root.appendNode('url', project.property("project.scm.url"))
			root.children().last() + pomBaseData
		}
	}

	ext.generatePom = generatePom

	def publishUser = rootProject.findProperty('BINTRAY_USER') ?: project.findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
	def publishPassword = rootProject.findProperty('BINTRAY_KEY') ?: project.findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')

	if (publishUser && publishPassword) {
		publishing {
			repositories {
				maven {
					credentials {
						username publishUser
						password publishPassword
					}
					url "https://api.bintray.com/maven/soywiz/soywiz/${project.property('project.package')}/"
					//url "https://api.bintray.com/content/soywiz/soywiz/korlibs/$projectVersion"
				}
			}

			configure(publications) {
				generatePom(pom)
			}
		}
	}
}
