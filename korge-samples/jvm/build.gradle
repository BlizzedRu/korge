import groovy.text.SimpleTemplateEngine

plugins {
	id 'kotlin-multiplatform' version '1.3.11'
	id 'com.moowork.node' version '1.2.0'
}

//apply plugin: 'application'

//mainClassName = 'Sample1'

repositories {
	mavenLocal()
	maven { url "https://dl.bintray.com/soywiz/soywiz" }
	jcenter()
	mavenCentral()
}


kotlin {
	targets {
		//fromPreset(presets.iosX64, 'iosX64')
		//fromPreset(presets.iosArm32, 'iosArm32')
		//fromPreset(presets.iosArm64, 'iosArm64')
		fromPreset(presets.macosX64, 'macosX64') {
			compilations.main.outputKinds 'executable' // could be 'static', 'dynamic'
		}
		//fromPreset(presets.linuxX64, 'linuxX64')
		fromPreset(presets.mingwX64, 'mingwX64') {
			compilations.main.outputKinds 'executable' // could be 'static', 'dynamic'
		}
		fromPreset(presets.jvm, 'jvm') {
			def jvmCompilations = compilations
			def mainKotlinTaskName = compilations.main.compileKotlinTaskName
			def mainOutputs = compilations.main.output
			def testRuntimeClasspath = compilations.test.runtimeDependencyFiles
			//println(mainKotlinTaskName)
			//println(mainOutputs)
			//println(testRuntimeClasspath)
		}
		fromPreset(presets.js, 'js') {
			compilations.main {
				compileKotlinJs.kotlinOptions {
					languageVersion = "1.3"
					sourceMap = true
					metaInfo = true
					moduleKind = "umd"
				}
				compileTestKotlinJs.kotlinOptions {
					languageVersion = "1.3"
					moduleKind = "umd"
				}

			}
		}
	}
	sourceSets {
		nonNativeCommonMain
		nativeCommonMain
		nativeCommonTest
		nativePosixMain
		configure([jvmMain, jsMain]) {
			dependsOn nonNativeCommonMain
		}
		mingwX64Main {
			dependsOn nativeCommonMain
		}
		mingwX64Test {
			dependsOn nativeCommonTest
		}
		configure([iosX64Main, iosArm32Main, iosArm64Main, macosX64Main, linuxX64Main]) {
			dependsOn nativeCommonMain
			dependsOn nativePosixMain
		}
		configure([iosX64Test, iosArm32Test, iosArm64Test, macosX64Test, linuxX64Test]) {
			dependsOn nativeCommonTest
		}
	}
}


dependencies {
	commonMainImplementation "com.soywiz:korge:$korgeVersion"

	commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
	commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
	commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

	jsMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
	jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js"

	jvmMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	jvmTestImplementation "org.jetbrains.kotlin:kotlin-test"
	jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

def mainClassName = 'Sample1'

task jvmRun(type: JavaExec) {
	classpath = kotlin.targets.jvm.compilations.test.runtimeDependencyFiles
	main = mainClassName
	//args 'appArg1'
}

task jvmFatJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title': mainClassName,
				'Implementation-Version': version,
				'Main-Class': mainClassName
	}
	baseName = project.name + '-all'
	from { kotlin.targets.jvm.compilations.main.runtimeDependencyFiles.collect { it.isDirectory() ? it : zipTree(it) } }
	with jvmJar
}

task jsWeb(dependsOn: [jsJar]) {
	doLast {
		copy {
			def jsCompilations = kotlin.targets.js.compilations

			includeEmptyDirs = false
			from "$buildDir/npm/node_modules"
			from jsCompilations.main.output.allOutputs
			exclude '**/*.kotlin_metadata', '**/*.kotlin_module', '**/*.MF', '**/*.kjsm', '**/*.map', '**/*.meta.js'
			jsCompilations.test.runtimeDependencyFiles.each {
				if (it.exists() && !it.isDirectory()) {
					from zipTree(it.absolutePath)
				} else {
					from it
				}
			}
			[kotlin.targets.js, kotlin.targets.metadata].each { target ->
				target.compilations.main.kotlinSourceSets.resources.collectMany { it.srcDirs }.each {
					from it
				}
			}
			into "$buildDir/web"
		}

		new File(project.buildDir, "web/index.html").text = new SimpleTemplateEngine().createTemplate(new File(project.buildDir, "web/index.template.html").text).make([
				"OUTPUT": project.name,
				"TITLE": project.name
		]).toString()
	}
}

File cordovaFolder = new File(project.buildDir, 'cordova')

task cordovaInstall(type: Exec) {
	onlyIf { !cordovaFolder.exists() }
	//workingDir cordovaFolder
	commandLine 'cordova', 'create', cordovaFolder.absolutePath, 'com.soywiz.sample1', 'sample1'
}

task cordovaAndroidInstall(type: Exec, dependsOn: [cordovaInstall]) {
	onlyIf { !new File(cordovaFolder, 'platforms/android').exists() }
	workingDir cordovaFolder
	commandLine 'cordova', 'platform', 'add', 'android'
}

task cordovaIosInstall(type: Exec, dependsOn: [cordovaInstall]) {
	onlyIf { !new File(cordovaFolder, 'platforms/ios').exists() }
	workingDir cordovaFolder
	commandLine 'cordova', 'platform', 'add', 'ios'
}

def cordovaPlugins = [
		'cordova-launch-review': [],
		'cordova-plugin-camera': [],
		'cordova-plugin-admob-free': ["ADMOB_APP_ID": "ca-app-pub-xxxxxxxx~yyyyyy"]
]

//cordova plugin add cordova-plugin-admob-free --save --variable ADMOB_APP_ID="<YOUR_ADMOB_APP_ID_AS_FOUND_IN_ADMOB>"


task cordovaPluginsInstall(dependsOn: [cordovaInstall]) {
	doLast {
		/*
		*/
		cordovaPlugins.each { plugin ->
			//println(it.key)
			def list = plugin.value.collectMany { pair ->
				["--variable", pair.key + "=" + pair.value]
			}
			exec {
				workingDir cordovaFolder
				println(['cordova', 'plugin', 'add', plugin.key, '--save', *list])
				commandLine('cordova', 'plugin', 'add', plugin.key, '--save', *list)
			}
			//println(list)
		}
	}
}

task cordovaWww(type: Copy, dependsOn: [jsWeb, cordovaInstall]) {
	from new File(project.buildDir, 'web')
	into new File(cordovaFolder, 'www')
	doLast {
		def f = new File(cordovaFolder, 'www/index.html')
		f.text = f.text.replace("</head>", "<script type=\"text/javascript\" src=\"cordova.js\"></script></head>")
	}
}

task cordovaAndroidRun(type: Exec, dependsOn: [cordovaAndroidInstall, cordovaPluginsInstall, cordovaWww]) {
	workingDir cordovaFolder
	commandLine 'cordova', 'run', 'android'
}

task cordovaIosdRun(type: Exec, dependsOn: [cordovaIosInstall, cordovaPluginsInstall, cordovaWww]) {
	workingDir cordovaFolder
	commandLine 'cordova', 'run', 'ios', '--device'
}
